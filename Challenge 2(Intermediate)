
pragma solidity ^0.8.0;

contract accessRestrictionControl{
//define emit events
  event GrantRole(bytes32 indexed role, address indexed account);
  
  
  //role => account
  mapping(bytes32 => mapping(address => bool)) public roles;
  
  //defining admin roles
  bytes32 private constant ADMIN = keccak256(abi.encodePacked("ADMIN"));

 //To prevent anyone use the grantrole function other than the admin
 modifier onlyRole(bytes32 _role) {
   require(roles[_role][msg.sender], "not authorized");
   _;
 }
  
  //Giving the admin role to the deployer
   constructor() {
    _grantRole(ADMIN, msg.sender);
   }

//Granting role to another account
function _grantRole(bytes32 _role, address _account) internal {
   roles[_role][_account] = true;
   emit GrantRole(_role, _account);
}

//External function for granting role to another account
 function grantRole(bytes32 _role, address _account)external onlyRole(ADMIN){
    _grantRole(_role, _account);
 }
}

